"""
Django settings for logboard project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import environ
import logging.config
import os
from django.utils.log import DEFAULT_LOGGING
from django.utils.translation import gettext_lazy as _
from celery.schedules import crontab


env = environ.Env(
    DEBUG=(bool, False),
    ADMIN_ENABLED=(bool, False),
    HOST_NAMES=(str, ''),
    DATABASE_ROOT=(str, '/opt/logboard/database'),
    DEFAULT_DATABASE_BACKEND=(str, 'sqlite'),
    DEFAULT_STORAGE_BACKEND=(str, 'local'),
    S3_QUERYSTRING_EXPIRE=(int, 3600),
    S3_ENCRYPTION=(bool, True),
    MEDIA_ROOT=(str, '/opt/logboard/media'),
    STATIC_ROOT=(str, '/var/www/html/static'),
    BROKER_URL=(str, 'redis://localhost:6379/0'),
)
env.read_env('.env')


def get_env(env_name: str):
    return os.environ.get(env_name, env(env_name))


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env('DEBUG')

# Disable admin page in production
ADMIN_ENABLED = get_env('DEBUG')

ALLOWED_HOSTS = ['*']

host_names_str = get_env('HOST_NAMES')
if host_names_str != '':
    host_names = host_names_str.strip(' ').split(',')
    ALLOWED_HOSTS = ALLOWED_HOSTS + host_names


CORS_ORIGIN_ALLOW_ALL = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 15728640

# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_results",
    "django_celery_beat",
    "django_crontab",
    "django_filters",
    'storages',
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "djoser",
    "drf_yasg",
    "sorl.thumbnail",
    "sorl_thumbnail_serializer",
    "apps.users",
    "apps.records",
]

if ADMIN_ENABLED:
    INSTALLED_APPS.append("django.contrib.admin")

AUTH_USER_MODEL = "users.CustomUser"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "logboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "logboard.wsgi.application"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

database_backends = {
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(get_env('DATABASE_ROOT'), 'db.sqlite3'),
        "ATOMIC_REQUESTS": True,
    },
}

if get_env('DEFAULT_DATABASE_BACKEND') == 'postgresql':
    database_backends['postgresql'] = {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': get_env('POSTGRESQL_DB_NAME'),
        'USER': get_env('POSTGRESQL_USERNAME'),
        'PASSWORD': get_env('POSTGRESQL_PASSWORD'),
        'HOST': get_env('POSTGRESQL_HOSTNAME'),
        'PORT': get_env('POSTGRESQL_PORT'),
        "ATOMIC_REQUESTS": True,
    }

default_database = database_backends.get(
    get_env('DEFAULT_DATABASE_BACKEND'),
    None
)

if not default_database:
    raise Exception('.env variable DEFAULT_DATABASE_BACKEND is invalid')

DATABASES = {
    'default': default_database,
}


# AWS S3 Settings

default_storage_backend = get_env('DEFAULT_STORAGE_BACKEND')
if default_storage_backend == 'local':
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
elif default_storage_backend == 's3':
    AWS_DEFAULT_ACL = None
    AWS_S3_HOST = 's3.amazonaws.com'
    S3_USE_SIGV4 = True
    AWS_QUERYSTRING_AUTH = True
    AWS_QUERYSTRING_EXPIRE = get_env('S3_QUERYSTRING_EXPIRE')
    AWS_ACCESS_KEY_ID = get_env('S3_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = get_env('S3_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = get_env('S3_STORAGE_BUCKET_NAME')
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_ENCRYPTION = True if get_env('S3_ENCRYPTION') == 'True' else False

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "logboard_cache"
    }
}

# Disable Django's logging setup
LOGGING_CONFIG = None

LOGLEVEL = os.environ.get("LOGLEVEL", "info").upper()

logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "default": {
                # exact format is not important, this is the minimum information
                "format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s",
            },
            "django.server": DEFAULT_LOGGING["formatters"]["django.server"],
        },
        "handlers": {
            # console logs to stderr
            "console": {"class": "logging.StreamHandler", "formatter": "default"},
            "django.server": DEFAULT_LOGGING["handlers"]["django.server"],
        },
        "loggers": {
            # default for all undefined Python modules
            "": {"level": "WARNING", "handlers": ["console"]},
            "dashboard": {"level": "DEBUG", "handlers": ["console"]},
            "noisy_module": {
                "level": "ERROR",
                "handlers": ["console"],
                "propagate": False,
            },
            # Default runserver request logging
            "django.server": DEFAULT_LOGGING["loggers"]["django.server"],
        },
    }
)


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/


# Supported languages
LANGUAGES = (
    ("en", ("English")),
    ("zh-hant", _("Traditional Chinese")),
    ("ja", _("Japanese")),
)

# Where to store the locale files
LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = get_env('STATIC_ROOT')

# Upload files
MEDIA_URL = '/files/'
MEDIA_ROOT = get_env('MEDIA_ROOT')

# SSL

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

CRISPY_TEMPLATE_PACK = "bootstrap4"


# Celery settings

CELERY_BROKER_URL = get_env('BROKER_URL')
CELERY_RESULT_BACKEND = 'django-db'

CELERY_BEAT_SCHEDULE = {
    "clean_expired_data": {
        "task": "apps.users.tasks.delete_old_users",
        "schedule": crontab(minute="*/1"),
    },
}
